@model NutriAI.Models.ChatViewModel


@{
    ViewBag.Title = "NutriAI - Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="chat-container">
    <!-- Sidebar con historial -->
    <div class="sidebar">
        <div class="logo">
            <h3><i class="fas fa-seedling"></i> NutriAI</h3>
            <p class="mb-0">Tu nutricionista virtual</p>
        </div>

        <button class="new-chat-btn" id="newChatBtn">
            <i class="fas fa-plus"></i> Nueva conversación
        </button>

        <div class="chat-history">
            <h5>Historial de conversaciones</h5>
            <div id="historyList">
                @if (Model.ChatSessions != null && Model.ChatSessions.Any())
                {
                    foreach (var session in Model.ChatSessions)
                    {
                        <div class="history-item" data-session-id="@session.Id">
                            <div class="d-flex justify-content-between">
                                <strong>@session.Title</strong>
                                <span>@session.MessageCount mensajes</span>
                            </div>
                            <small>@session.LastMessageTime.ToString("g")</small>
                        </div>
                    }
                }
                else
                {
                    <p>No hay conversaciones previas</p>
                }
            </div>
        </div>
    </div>

    <!-- Área principal del chat -->
    <div class="chat-main">

        <div class="chat-main_in">

     

        <div class="chat-messages" id="chatMessages">
            <!-- Los mensajes se cargarán aquí -->
            <div class="welcome-message text-center" style="padding-top: 30%;">
                <i class="fas fa-comments fa-3x mb-3" style="color: #2e7d32;"></i>
                <h4>¡Hola! Soy tu nutricionista IA</h4>
                <p>Pregúntame sobre alimentación saludable, dietas o nutrientes.</p>
            </div>
        </div>

        <div class="chat-input">
            <div class="input-group">
                <button class="btn btn-outline-success me-2" type="button" data-bs-toggle="modal" data-bs-target="#userInfoModal">
                    <i class="fas fa-user"></i>
                </button>
                <textarea class="form-control message-input" id="messageInput" rows="1" placeholder="Escribe tu pregunta sobre nutrición..." }"></textarea>
                <button class="btn send-button ms-2" id="sendButton" onclick="sendMessage()">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>

            <div class="modal fade" id="userInfoModal" tabindex="-1" aria-labelledby="userInfoModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content rounded-3 shadow">
                        <div class="modal-header bg-success text-white">
                            <h5 class="modal-title" id="userInfoModalLabel"><i class="fas fa-user"></i> Datos del Usuario</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                        </div>
                        <div class="modal-body">
                          

                            @using (Html.BeginForm("GuardarUserInfo", "Chat", FormMethod.Post, new { id = "userInfoForm" }))
                            {
                                @Html.AntiForgeryToken()

                                <div class="mb-3">
                                    @Html.LabelFor(m => m.UserInfo.Edad, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.UserInfo.Edad, new { @class = "form-control", @type = "number", @placeholder = "Ej: 25" })
                                    @Html.ValidationMessageFor(m => m.UserInfo.Edad, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    @Html.LabelFor(m => m.UserInfo.Altura, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.UserInfo.Altura, new { @class = "form-control", @type = "number", @placeholder = "Ej: 175" })
                                    @Html.ValidationMessageFor(m => m.UserInfo.Altura, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    @Html.LabelFor(m => m.UserInfo.Peso, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.UserInfo.Peso, new { @class = "form-control", @type = "number", @placeholder = "Ej: 70" })
                                    @Html.ValidationMessageFor(m => m.UserInfo.Peso, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    @Html.LabelFor(m => m.UserInfo.PreferenciaAlimenticia, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.UserInfo.PreferenciaAlimenticia, new { @class = "form-control", @placeholder = "Ej: Vegetariano, sin gluten..." })
                                    @Html.ValidationMessageFor(m => m.UserInfo.PreferenciaAlimenticia, "", new { @class = "text-danger" })
                                </div>
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                            <button type="submit" class="btn btn-success" form="userInfoForm">Guardar</button>
                        </div>
                    </div>
                </div>

            </div>
        </div>




    </div>
</div>
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const userInfoForm = document.getElementById("userInfoForm");

            userInfoForm.addEventListener("submit", function (e) {
                e.preventDefault();

                const formData = new FormData(userInfoForm);
                const userInfo = {
                    edad: parseInt(formData.get("UserInfo.Edad")),
                    altura: parseFloat(formData.get("UserInfo.Altura")),
                    peso: parseFloat(formData.get("UserInfo.Peso")),
                    preferenciaAlimenticia: formData.get("UserInfo.PreferenciaAlimenticia")
                };

                const token = formData.get("__RequestVerificationToken");

              
                fetch("/Chat/GuardarUserInfo", {
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: new URLSearchParams({
                        "__RequestVerificationToken": token,
                        "UserInfo.Edad": userInfo.edad,
                        "UserInfo.Altura": userInfo.altura,
                        "UserInfo.Peso": userInfo.peso,
                        "UserInfo.PreferenciaAlimenticia": userInfo.preferenciaAlimenticia
                    })
                })
                .then(r => r.json())
                .then(data => {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('userInfoModal'));
                    modal.hide();
                    addMessage("NutriAI", data.mensaje);
                })
                .catch(err => {
                    console.error(err);
                    addMessage("NutriAI", "Error al guardar los datos del usuario.");
                });
            });

            window.sendMessage = function () {
                const messageInput = document.getElementById("messageInput");
                const message = messageInput.value.trim();
                if (!message) return;

                addMessage("Tú", message);
                messageInput.value = "";

                showTypingIndicator();

                fetch("/Chat/EnviarMensaje", {
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: new URLSearchParams({ mensaje: message })
                })
                .then(r => r.json())
                .then(data => {
                  
                    hideTypingIndicator();
                    addMessage("NutriAI", data.respuesta);
                })
                .catch(err => {
                    hideTypingIndicator();
                    addMessage("NutriAI", "Error al comunicarse con el servidor.");
                });
            };

            function addMessage(sender, text) {
                const msgContainer = document.getElementById("chatMessages");

              
                const welcome = msgContainer.querySelector(".welcome-message");
                if (welcome) {
                    welcome.style.display = "none";
                }

                const div = document.createElement("div");
                div.className = sender === "NutriAI" ? "message bot-message mb-2 p-2 rounded" : "message user-message mb-2 p-2 rounded";
                div.innerHTML = `<strong>${sender}:</strong> ${text}`;
                msgContainer.appendChild(div);
                msgContainer.scrollTop = msgContainer.scrollHeight;
            }

         
            function showTypingIndicator() {
                const msgContainer = document.getElementById("chatMessages");
                const typingDiv = document.createElement("div");
                typingDiv.id = "typingIndicator";
                typingDiv.className = "message bot-message mb-2 p-2 rounded";
                typingDiv.innerHTML = '<strong>NutriAI:</strong> <em>Escribiendo...</em>';
                msgContainer.appendChild(typingDiv);
                msgContainer.scrollTop = msgContainer.scrollHeight;
            }

        
            function hideTypingIndicator() {
                const typingIndicator = document.getElementById("typingIndicator");
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }

         
            document.getElementById("messageInput").addEventListener("keypress", function(e) {
                if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

        });
    </script>
}

}
